# generated by datamodel-codegen:
#   filename:  raw.json
#   timestamp: 2023-04-04T19:12:50+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field


class Self(BaseModel):
    href: str


class FieldLinks(BaseModel):
    self: Self


class Map(BaseModel):
    name: str
    id: int


class ConnectedRealm(BaseModel):
    href: str


class Key(BaseModel):
    href: str


class Realm(BaseModel):
    key: Key
    id: int
    slug: str


class Profile(BaseModel):
    name: str
    id: int
    realm: Realm


class Faction(BaseModel):
    type: str


class Specialization(BaseModel):
    key: Key
    id: int


class Member(BaseModel):
    profile: Profile
    faction: Faction
    specialization: Specialization


class Color(BaseModel):
    r: int
    g: int
    b: int
    a: float


class MythicRating(BaseModel):
    color: Color
    rating: float


class LeadingGroup(BaseModel):
    ranking: int
    duration: int
    completed_timestamp: int
    keystone_level: int
    members: List[Member]
    mythic_rating: MythicRating


class KeystoneAffix1(BaseModel):
    key: Key
    name: str
    id: int


class KeystoneAffix(BaseModel):
    keystone_affix: KeystoneAffix1
    starting_level: int


class Model(BaseModel):
    field_links: FieldLinks = Field(..., alias='_links')
    map: Map
    period: int
    period_start_timestamp: int
    period_end_timestamp: int
    connected_realm: ConnectedRealm
    leading_groups: List[LeadingGroup]
    keystone_affixes: List[KeystoneAffix]
    map_challenge_mode_id: int
    name: str
